import streamlit as st
import re
import contractions
import emoji
import string
import tensorflow as tf
import numpy as np

import os
os.environ['HF_HOME'] = 'C:/hf_cache'

from transformers import AutoTokenizer, MarianMTModel, MarianTokenizer
import datetime

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Analyse de Sentiment des Tweets",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour am√©liorer l'interface
st.markdown("""
<style>
    .main-header {
        font-size: 36px;
        font-weight: bold;
        color: #1DA1F2;
        text-align: center;
        margin-bottom: 20px;
    }
    .sub-header {
        font-size: 24px;
        color: #14171A;
        margin-bottom: 15px;
    }
    .result-box {
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        font-size: 18px;
    }
    .positive-sentiment {
        background-color: #E8F5E9;
        border-left: 5px solid #4CAF50;
    }
    .neutral-sentiment {
        background-color: #E3F2FD;
        border-left: 5px solid #2196F3;
    }
    .negative-sentiment {
        background-color: #FFEBEE;
        border-left: 5px solid #F44336;
    }
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #F5F8FA;
        color: #657786;
        text-align: center;
        padding: 10px;
        font-size: 14px;
    }
    .sidebar-content {
        padding: 15px;
    }
</style>
""", unsafe_allow_html=True)

# Fonction de pr√©traitement du texte
def pre_process(tweet):
    pattern_web = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    pattern_email = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    pattern_hash = r'#(\w+)'
    pattern_handle = r'@\w+'
    pattern_repeat = r'(.)\1{2,}'
    
    t_mod = re.sub(pattern_web, '', tweet)  # Supprime les URLs
    t_mod = re.sub(pattern_email, ' ', t_mod)  # Supprime les emails
    t_mod = re.sub(pattern_hash, " \\1", t_mod)  # Supprime '#'
    t_mod = re.sub(pattern_handle, " ", t_mod)  # Supprime les handles
    t_mod = emoji.demojize(t_mod)  # Convertit les emojis en texte
    
    t_mod = re.sub(r'`', "'", t_mod)  # Remplace ` par '
    t_mod = contractions.fix(t_mod)  # √âtend les contractions
    
    t_mod = re.sub(pattern_repeat, r'\1', t_mod)  # Normalise les caract√®res r√©p√©t√©s
    t_mod = re.sub(r'[0-9]', " ", t_mod)  # Supprime les nombres
    
    pattern_punc = "[" + re.escape(string.punctuation) + "]"
    t_mod = re.sub(pattern_punc, " ", t_mod)  # Supprime la ponctuation
    
    t_mod = t_mod.lower()  # Convertit en minuscules
    t_mod = re.sub(r'\s+', " ", t_mod)  # Supprime les espaces multiples
    
    return t_mod.strip()

# Fonction pour charger le tokenizer et le mod√®le de sentiment
@st.cache_resource
def load_model_and_tokenizer():
    with st.spinner('Chargement du mod√®le de sentiment en cours...'):
        tokenizer = AutoTokenizer.from_pretrained("distilbert/distilbert-base-uncased")
        saved_model = tf.saved_model.load('tweet_sentiment_analysis/model_distilBERT')
        inference_func = saved_model.signatures['serving_default']
    return tokenizer, inference_func

# Fonction pour charger le mod√®le de traduction
@st.cache_resource
def load_translation_model():
    with st.spinner('Chargement du mod√®le de traduction en cours...'):
        model_name = "Helsinki-NLP/opus-mt-fr-en"
        translator_tokenizer = MarianTokenizer.from_pretrained(model_name)
        translator_model = MarianMTModel.from_pretrained(model_name)
    return translator_tokenizer, translator_model

# Fonction de traduction
def translate_tweet(text, translator_tokenizer, translator_model):
    inputs = translator_tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=128)
    translated = translator_model.generate(**inputs)
    translated_text = translator_tokenizer.decode(translated[0], skip_special_tokens=True)
    return translated_text

# Fonction d'analyse du sentiment
def analyze_tweet(text, tokenizer, inference_func):
    dict_sentiments = {0: 'N√©gatif', 1: 'Neutre', 2: 'Positif'}
    cleaned_text = pre_process(text)
    tokens = tokenizer(cleaned_text, return_tensors="tf", max_length=128, truncation=True, 
                      padding="max_length", return_attention_mask=True, return_token_type_ids=False)
    
    outputs = inference_func(
        input_ids=tokens['input_ids'],
        attention_mask=tokens['attention_mask']
    )
    
    y_score = outputs['logits']
    probabilities = tf.nn.softmax(y_score, axis=1).numpy()[0]
    y_pred = np.argmax(y_score, axis=1)
    
    return dict_sentiments[y_pred[0]], probabilities, cleaned_text

# Barre lat√©rale avec informations
with st.sidebar:
    st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
    st.subheader("√Ä propos de cette application")
    st.write("""
    Cette application traduit les tweets en fran√ßais vers l'anglais, puis analyse leur sentiment 
    √† l'aide d'un mod√®le DistilBERT fine-tun√© (positif, neutre, n√©gatif).
    """)
    
    st.subheader("Comment √ßa marche")
    st.write("""
    1. Entrez votre tweet en fran√ßais dans la zone de texte
    2. Cliquez sur 'Analyser'
    3. Consultez le tweet traduit, le texte pr√©trait√© et le r√©sultat de l'analyse
    """)
    
    st.subheader("Pr√©traitement appliqu√©")
    st.write("""
    ‚Ä¢ Traduction du fran√ßais vers l'anglais
    ‚Ä¢ Suppression des URLs et emails
    ‚Ä¢ Conversion des emojis en texte
    ‚Ä¢ Nettoyage de la ponctuation
    ‚Ä¢ Normalisation du texte
    """)
    st.markdown('</div>', unsafe_allow_html=True)

# En-t√™te principal
st.markdown('<div class="main-header">üê¶ Analyse de Sentiment des Tweets</div>', unsafe_allow_html=True)

# Corps de l'application
col1, col2 = st.columns([3, 1])

with col1:
    tweet_input = st.text_area(
        "Entrez un tweet en fran√ßais √† analyser:",
        height=150,
        placeholder="Qu'avez-vous en t√™te aujourd'hui? Entrez votre texte en fran√ßais ici..."
    )

with col2:
    st.markdown("<br><br>", unsafe_allow_html=True)
    analyze_button = st.button("Analyser le sentiment", use_container_width=True)

# Traitement de l'analyse
if analyze_button:
    if tweet_input.strip():
        try:
            with st.spinner('Traduction et analyse du sentiment en cours...'):
                # Charger les mod√®les
                tokenizer, inference_func = load_model_and_tokenizer()
                translator_tokenizer, translator_model = load_translation_model()
                
                # Traduire le tweet
                translated_tweet = translate_tweet(tweet_input, translator_tokenizer, translator_model)
                
                # Analyser le sentiment
                sentiment, probabilities, cleaned_text = analyze_tweet(translated_tweet, tokenizer, inference_func)
                
                # Afficher les textes
                st.subheader("Textes")
                col_orig, col_trans = st.columns(2)
                with col_orig:
                    st.write("**Tweet original (fran√ßais):**")
                    st.code(tweet_input)
                with col_trans:
                    st.write("**Tweet traduit (anglais):**")
                    st.code(translated_tweet)
                
                # Afficher le texte pr√©trait√©
                with st.expander("Texte pr√©trait√© (anglais)"):
                    st.code(cleaned_text)
                
                # Afficher le r√©sultat
                sentiment_class = f"{sentiment.lower()}-sentiment"
                st.markdown(f"""
                <div class="result-box {sentiment_class}">
                    <h3>R√©sultat de l'analyse</h3>
                    <p>Sentiment pr√©dit: <strong>{sentiment}</strong></p>
                </div>
                """, unsafe_allow_html=True)
                
                # Afficher les probabilit√©s
                st.subheader("D√©tails de l'analyse")
                col_neg, col_neut, col_pos = st.columns(3)
                with col_neg:
                    st.metric("N√©gatif", f"{probabilities[0]*100:.1f}%")
                with col_neut:
                    st.metric("Neutre", f"{probabilities[1]*100:.1f}%")
                with col_pos:
                    st.metric("Positif", f"{probabilities[2]*100:.1f}%")
                
        except Exception as e:
            st.error(f"Erreur lors de l'analyse: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è Veuillez entrer un tweet √† analyser.")

# Pied de page avec copyright
current_year = datetime.datetime.now().year
st.markdown(f"""
<div class="footer">
    ¬© {current_year} | Application r√©alis√©e par Aminata BA et Di√© Sylla | Tous droits r√©serv√©s
</div>
""", unsafe_allow_html=True)